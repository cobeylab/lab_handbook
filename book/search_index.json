[
["index.html", "Cobey Lab Handbook Preface", " Cobey Lab Handbook 2018-10-14 Preface This handbook is partly for prospective or new lab members who want to know how we do things. The first chapters, where we lay out our principles and general style of work, are most relevant here. The main purpose of this handbook, however, is to help current lab members share knowledge, develop skills, and get things done. Contributions welcome. "],
["why.html", "Chapter 1 Why we work", " Chapter 1 Why we work As a lab, we have two equally important goals: to perform high-quality research and to create an environment that accelerates the growth of scientists and improves the practice of science. Performing high-quality research means that we undertake meaningful problems, investigate them in a rigorous way, and promptly publish our results so that others can easily pick up where we leave off. Creating an environment that promotes the growth of scientists means that we support the expansion of our own and one another’s research capacities, especially through persistent effort, curiosity, and constructive criticism. These practices in themselves should improve the way science is done, but we also have broader responsibilities to promote equity, limit unnecessary struggle and wasted resources, and perform research with the public good in mind. This handbook outlines practices to help us achieve these goals. We’ll always be improving our methods! "],
["how-we-work.html", "Chapter 2 How we work 2.1 Principles 2.2 Work hours 2.3 Workspace 2.4 Communication 2.5 Weekly check-ins 2.6 Lab meetings 2.7 Reproducible research", " Chapter 2 How we work 2.1 Principles Do ambitious research. Research always seems to take more time than it should, so spend your time on important questions. Think hard about what should be done, not only what can be done. Try not to let others define subfields and questions for you. Be deeply practical in evaluating your progress and choosing your next steps, but work toward lofty aims. Learn fast and change direction when necessary. Research involves making mistakes, or at least doing things that seem really dumb in retrospect. Learn as much as possible from your failures. (Could you have found that bug earlier? Learned about that other technique earlier?) Do not shame yourself for them. Instead, admit them, and document this learning for yourself and others by talking about it or potentially adding some advice to the handbook. Note that failing is not the same thing as not having the result you wanted—it’s a good day when your hypothesis is not supported and you get to learn something about how the world works. Frequently reevaluate your approach and the direction of each project, and take initiative in doing this. (Take initiative as a collaborator too.) Know your corner of the literature. It makes you much smarter and can save enormous time in the long run. It also makes it easier to spot good opportunities and unanswered questions. Knowing the literature inside and out is a requirement for first authors. Develop a scientific reading habit if you don’t have one yet. As a general guideline, on average, graduate researchers and postdocs should be reading five papers a week, and skimming more. Be open to collaboration, and respect your collaborators. Getting anything worthwhile done in research requires learning from others, whether through papers or talks. Be proactive in thinking about who might have relevant expertise. Ask for help, give help, and carefully acknowledge the contributions of others. Clarify expectations when you start on a project: make agreements explicit (and for all but the smallest things, in writing), with expectations and timelines, and be reliable. For instance, let your collaborators know when they can expect to hear from you with new results, drafts, etc. These principles hold for interactions inside and outside the lab. Communicate assertively. It’s nice to hear from other people that they’ve benefited from your analysis, timeliness, criticism, etc. Tell people whenever you can that you like what they’re doing. Consider emailing strangers when you like their paper or talk, and explain why. On the flip side, it’s frustrating to learn from a third party that someone is unhappy with something we said or did. Assertive communication means we give each other direct, constructive feedback if we think something isn’t right. You can trust me not to negatively describe your behavior to others without speaking to you first. More broadly, if you think something can be improved, speak up to the right people before complaining to others. Be constructive by criticizing the idea, analysis, or behavior, rather than the person. Don’t be too narrow. Take time to play intellectually. Participate in departmental seminars, go to talks in other departments, meet with people who seem to be doing interesting things, and read exciting papers that might not be obviously related to your current projects. (Graduate researchers should aim to attend a departmental seminar and journal club each week.) Start journal clubs and groups that you wish existed and would make time for. Try to balance exploration with work on existing projects. Work hard but sustainably. Figure out sustainable habits for effective research. What is sustainable is personal: avoid blindly adopting others’ criteria. Focus on habits, such as working set hours each day, before benchmarks (e.g., “Publish”, “Get speaking invitation”, “Be famous!!!11!!” etc.). Resist the temptation to run from one deadline to the next, and think instead about how to make regular progress. (Do this especially if you’re (i) fresh out of undergrad, or (ii) have never done it before because you think you work best under pressure.) Aim for 40 hours of focused work per week. If you’re not happy with your progress or productivity, there’s no shame in asking for help or ideas from others, including your advisor. For what it’s worth, I do think it’s possible to do great research while having a life. (I’ve seen others do it!!! lolz) A great resource for sustainable habits is the National Center for Faculty Development and Diversity. They have online classes, weekly newsletters, and writing support groups. The University of Chicago has a subscription, so you should be able to get free access. Be accountable. All work in the lab is collaborative, involving the blood, sweat, and tears (and hopes and dreams!) of multiple people, and often indirectly taxpayers. Respect all these contributions by being a reliable, involved scientist. Let collaborators know if your contributions will be delayed, if you think something should be done differently, or if you have concerns about quality. Always look for better hypotheses and approaches. Speak up if you see something that’s not right. Remember we’ll all be dead soon enough, and this is our opportunity to help others. 2.2 Work hours I will not judge your progress based on the hours you keep in the lab: what matters most is that you make substantive progress on the lab’s goals. I encourage you to figure out how you work best. You thus have broad freedom to choose how you work, provided you communicate your plans to others and see the projects through. But because we’re human, and it’s nice to see other, non-digitized human faces regularly, aim to spend at least three days a week (for most of the workday) in lab. You don’t have to communicate your schedule with me in advance, as long as you’re around roughly this much and show up for meetings. Undergrads and out-of-state lab members will have different arrangements, of course. Take vacations! Take good ones, show us the photos, and bring back tea, chocolate, and/or fine liquor. Try to use all your vacation time. You don’t need approval from anyone before you select dates, but please try to give collaborators advance notice and consider their schedules. Mark the days you plan to be away on the lab calendar. Please stay home if you’re sick. You will be judged for this one. Non-hourly, benefits-eligible employees (including graduate students) are entitled to various forms of parental, personal, and family leave, and I encourage you to take them if you need them. If you need other accommodations, please let me know. 2.3 Workspace The lab space is supposed to help you work efficiently and happily: I want it to be a place where people can reliably go to get stuff done. Keep the main room quiet. If others are present, have meetings (in person or via Skype) in an adjacent conference room. Please feel free to customize your space. Adjust the location and height of your desk and file cabinet as you see fit. Let me know if you’d like a privacy screen, a fan or space heater, etc. Check with others before bringing pets to work. Consult others before making dramatic changes to the lighting or temperature. Keep things clean. Wipe your desk. Wipe the kitchen counter. Do not wipe crumbs on the floor. Clean up spills. Gently encourage others to do the same. Bad habits kill adorable, innocent mice. To make the room easier to clean, avoid letting your stuff overflow past your desk. Don’t leave piles of stuff on the floor for more than a few days. Please let me know if there are ways the space can be more comfortable, or if there are particular things (e.g., new computer or software) that would improve your work. 2.4 Communication Please limit the use of email for research questions and discussions. Use Asana instead—it makes things much easier to find in the long run, and it has no overeager spam filter. Asana is also the best tool for lab announcements and discussions. I do not expect you to check email or Asana on weekends, vacations, sick days, or holidays. I’ll always try to respond to your communications within 24 h, excluding weekends, vacations, sick days, and holidays. In general, you should check email and Asana a few times a day and try to respond to urgent requests within an hour or two (M-F), but I expect urgent requests to be few and far between. They will probably have some warning (e.g., an impending paper or grant deadline). If I’m in my office and the door is open, you’re welcome to come in to talk. If the door is closed, it means I’m working, and it’s best to communicate via Asana. 2.5 Weekly check-ins Every week, you’ll meet individually with me to discuss research and occasionally other topics. The agendas of these meetings is largely up to you. However, I ask you to come prepared with slides, an updated summary, or notebook (Rmd, Jupyter, etc.) concisely describing progress since the last meeting. You can choose whichever specific format works best for you, but somehow, your notes should clearly state (i) what goals you had set last week for this week, (ii) your progress on each goal, and (iii) what you think comes next. (This format is really helpful for me.) The meeting is time to both dig into the weeds but also think about the big picture. I’ll try to remind you of this, but one of my main goals for each meeting is to learn how I can best support you, during the meeting and after. If our relationship needs adjusting, please let me know. When I’m traveling, these weekly meetings may need to be rescheduled or occur over the phone. 2.6 Lab meetings We’ll meet weekly as a lab. Meetings start with various announcements of abstract deadlines, cool upcoming talks, new papers, etc., and then we briefly update one another on our research (roughly 1-5 min per person). The point of these updates is to practice describing our research and also keep each other involved in our work, which includes providing helpful suggestions. The rest of the meeting is usually dedicated to in-depth presentation and discussion of one of our research projects or a discussion of a paper. Plan to present your research once per quarter and to lead at least one paper discussion per quarter. 2.7 Reproducible research You have broad freedom in most aspects of how you work, but there are certain protocols we follow to keep our work reproducible, accessible, and organized. Reproducible means that other researchers could use your notes and code to reconstruct your results precisely without guesswork or manual labor. All of the figures and results in any manuscript must be fully reproducible by executing one or a few scripts in a public github repository. It should also be easy to reproduce intermediate results during development. Basically, this means we use version control, git. Accessible means that (i) all of your code, including small scripts, is maintained in a git repository that is regularly (e.g., daily) synced to the lab’s github account; (ii) all raw data and major results are stored on Midway projects/cobey (unless other arrangements required by IRB); (iii) project management is visible to all lab members on Asana; and (iv) you regularly back up your laptop using an external hard drive and CrashPlan Pro. Organized means that you keep your project files organized, use version control, document your code, include unit and system tests, use Asana and/or notebooks to record all decisions in your analysis from day to day and week to week, and you refactor code when it stinks. It also means you communicate progress promptly to collaborators in meetings and (for external collaborators) emails. Specific suggestions are in Section 4. "],
["performance.html", "Chapter 3 Performance 3.1 Reviews 3.2 My commitments 3.3 Basic expectations 3.4 Graduate researchers 3.5 Postdoctoral researchers", " Chapter 3 Performance 3.1 Reviews There should be informal reviews at every weekly meeting. The point is mutual feedback, i.e., we can discuss your progress and develop achievable goals for the next few days to years, and you can tell me if there are areas in which I can provide better help. If you would like more formal progress reviews, let me know. Please also let me know if you are ever worried about your progress. Postdocs and salaried researchers will get formal annual reviews as required by the Biological Sciences Division, but they are really secondary to the regular meetings (i.e., there should be no surprises). 3.2 My commitments Meet with you at least biweekly (usually weekly) to discuss research and professional opportunities. Help give you an accelerated introduction to the field. Provide rapid (within days) critical feedback on research ideas and drafts (with advance notice!). Help you establish relationships with other scientists in field. Promote your work in conferences and meetings. Help you attend conferences and meetings. Help identify areas of professional growth. Provide teaching and mentoring opportunities, if desired. Fund you for at least \\(n\\) years (as agreed). Be a trustworthy, reliable, honest, hard-working, constructive, respectful, and communicative colleague. (For postdocs) Help you identify a line of research to continue when you leave the lab. 3.3 Basic expectations Follow the lab’s principles (Section 2.1) and all our described work practices, including the project management and programming techniques described in Section 4. Take full intellectual ownership of your research, i.e., think hard about whether you and your collaborators are doing the right thing, search for relevant papers, and push your projects forward at a good pace. Develop annual and long-term professional goals as soon as you join the lab, and discuss them with me then and regularly thereafter. Let me know whenever yours goals change. (It’s okay if your long-term goals are amorphous, just let me know.) Perform lab service, as agreed upon (e.g., maintain the lab calendar, order office supplies, water the plants). 3.4 Graduate researchers I’ve listed below the skills I think graduate researchers should have by the time they defend their PhD. Your adviser and committee will help steer you, but you are in control. (I kind of dislike the “student” convention, tbh. You’re scientists, just less experienced ones.) To have the best possible time in grad school, it’s probably useful to draft your own list and discuss any differences with me. Intellectual independence and mastery Be able to define a coherent field of study, including the progress that has been made in it and the problems that remain. This requires following the literature by regular, self-directed reading (at least five papers a week, conservatively, on average). Have enough statistical and general knowledge to assess the strength of evidence of (almost) any study or general claim in this field Propose and carry out tractable, meaningful studies Identify new questions you want to answer and have an idea of how to address them Have a demonstrated history of acquiring skills through self-driven instruction and self-initiated collaborations Intellectual contributions Publish at least two papers on which you’re first author. These papers should be submitted by the time you defend. Note, this is not the requirement of the UChicago MSTP or E&amp;E programs, but I think it is an important minimal target. Give talks outside the department and handle questions about your work. Collaborate on projects on which you’re not the first author. Ask public questions during conference talks and seminars. Toughness Practice feeling clueless regularly and getting over it, especially through learning. Adapt projects to deal with unexpected outcomes. Learn how to handle diverse forms of criticism and professional conflict. Service Be able to criticize constructively in any situation. After publishing, start reviewing manuscripts for journals. Understand social and political context for scientific research. Practice sharing your work with broader audiences, e.g., via blog posts, talks to the public, and interviews. Seek funding opportunities and apply for grants. Have an established habit of reliability from communicating with committees, collaborators, and administrators in a timely, respectful way. 3.5 Postdoctoral researchers Generally, postdocs should have facility with all of the skills listed above and Develop new research projects and manage external collaborations. Drive projects forward in consideration of existing and ongoing research in the field. Manage research performed under federal contracts, including the completion of monthly progress reports. Teach selectively, if interested in a teaching position. Mentor junior researchers. "],
["so-you-wanna.html", "Chapter 4 So you wanna… 4.1 Join the lab 4.2 Do some research 4.3 Code well and efficiently 4.4 Write well 4.5 Write good emails 4.6 Make nice figures 4.7 Keep up with the literature 4.8 Get funded 4.9 Do peer review 4.10 Have productive meetings 4.11 Book travel", " Chapter 4 So you wanna… 4.1 Join the lab We welcome applications from skilled, ambitious, and independent researchers at all levels, as long as they are burning to do good research promptly. Undergraduate students interested in joining the lab generally need to be proficient (not brilliant) in at least one programming language, such as Python, R, Matlab, C(++), or Java, and have some biological background or curiosity in at least one research area. You should also be proficient in basic statistics. Prospective graduate students are encouraged to review the details of the graduate program and the research described here. They may wish to consider working as research assistants in the lab to ensure a good fit before applying to the graduate program. Rotation students must start with strong quantitative and some programming skills. Senior researchers, research programmers, and postdoctoral fellows are also welcome to contact Sarah about opportunities for support and collaboration. We are especially looking for more postdocs to study the evolutionary dynamics of adaptive immunity. All who are interested in joining the lab should explain in their initial communication what skills they could bring to the lab and what they hope to obtain from collaborating. It is essential to have read recent papers in the relevant research area, including some from our group, and to have an idea of the kind of questions or problems that excite you. 4.2 Do some research Identify a good question: This can take some time. Talk with other people, read, keep talking, study patterns, reason from first principles, and keep talking. What phenomena are you trying to explain? Develop a game plan: Draft some approaches. Prioritize a few. Add the actionable tasks to Asana. (You can keep backup ideas there too in a separate section.) Set up a notebook: It’s easiest if you create a version-controlled “lab notebook” in which to record your progress, which includes your thinking, notes from papers, and your analyses. There are a lot of fine ways to do this. You could use Asana and Overleaf (Latex), or a R markdown file, or a Jupyter notebook. It doesn’t matter too much. Put files in a repository, synced to the lab’s github account. Everything you do should be traceable and reproducible in some way—no quick “one off” figures that exist only on your laptop. Have the right attitude: As long as you’re reasoning based on evidence, you’re making progress. See Schwartz (2015). Not all projects should move ahead. This is why it’s useful to step back, reassess, and discuss your work with others. 4.3 Code well and efficiently (Populate with content from lab wiki) 4.4 Write well One of the best ways to write good papers is to read lots of good papers. This is more comfortable than learning incrementally from rejections. Also, there are useful books and essays on the subject (see below). For grants and papers, the central challenge is to articulate an interesting question and show how you have helped or will help answer it. Practice doing this from the beginning of your research project, as you sketch ideas and results in your notebook. Be clear. Use topic sentences. Assume your reader is an intelligent first-year graduate student. Try to state things vividly and directly. Your writing will almost always improve if you try to explain your reasoning as transparently as possible. Focus on ideas, not paradigms or studies. Do not say, “Many studies have shown X,” just state what has been shown and give references. Be consistent. If you define a parameter, refer to it the same way throughout your paper. This holds for all sorts of annoying punctuation and formatting conventions. Channel the reader’s attention into one clear, fascinating story, and let nothing distract from it. Recommendations: “Why Academics Stink at Writing”, The Elements of Style (which I really like, contrary to Claus), and “Ten Simple Rules for Writing Research Papers” 4.5 Write good emails Be concise. Be clear if you are asking for something, or if you are simply giving information. Try to minimize the number of back-and-forths required: instead of asking if someone is free to meet next week, list blocks of time you are available and propose a location. Make it easy to reply quickly. Rather than send large attachments, send a link to a Box or Dropbox directory where the file can be downloaded. Be polite. (Being concise is part of being polite, but being polite also means using professional titles and spell-checking your email.) Striking the right tone can be hard sometimes. One error that very junior scientists sometimes make is being excessively deferential (“I was wondering maybe if you might consider…”). 4.6 Make nice figures Mostly, see Claus Wilke’s excellent online guide, Data Visualization. Some immediate suggestions: Label your axes. All parameters should be spelled out and accompanied by their symbol (e.g., “Transmission rate, \\(\\beta\\)”). Save figures in vector formats. If many points are plotted over one another, consider semi-transparency or plotting densities. Minimize wasted space in figures while ensuring your axis limits are appropriate (e.g., that fractions ranging from 0 to 1 have y-axis ranges of [0,1]). Titles are frequently a waste of space, but be sure to include key information somewhere nearby, e.g., what the shaded area represents, how you assessed significance, etc. To increase accessibility, avoid relying on red/green contrasts. 4.7 Keep up with the literature Keeping up with the literature involves two challenges: finding papers and reading them. I’ve described what I do, but there could be better solutions. Finding papers: Use a RSS reader. Subscribe to major journals and bioRxiv and arXiv topics. Skim the titles and abstracts when you have a few minutes here and there. This will probably identify 90% of the papers you might care about. Set up Google alerts so you can get emails when particular papers and people are cited. Do a good search in any area of interest so you can identify relevant papers published decades ago. It is amazing how rapidly phenomenal work can be forgotten by a field. Reading papers: Just block off the time on your calendar and do it. Consider setting up a small reading group to discuss more challenging papers. (For easier papers, this can double the time it takes to read them.) Also take advantage of theory group and lab meetings to force these discussions. 4.8 Get funded Aggressively search for opportunities. Ask the grad student and postdoc coordinators, ask your peers, do searches, etc. Periodically recheck. Work backwards from deadlines, giving yourself much more time than seems necessary, and establish a schedule. Ask Linda if the grant will need to be reviewed by the URA and find out what their deadline is. This is the effective deadline (it’s usually about two weeks before the submission deadline). Letter writers usually need at least three weeks before then, and it is best if you can give them a good copy of your research proposal by then too. Depending on the complexity of the application, we may need four or more weeks to bounce drafts back and forth. For applications with mentoring plans, it’s especially useful to get started several months ahead, so we can identify if another sponsor should be brought on board. It’s also important to start early if we’re unsure the research will be a good fit for the funder: we need the time to revise our pitch in coordination with the program officer. Identify several people who will read a draft of your proposal. It’s best if some of them have been successfully funded and if they are not in your subfield. (Ideally, they’d be just like the review panel.) Ask how long they’ll need with the proposal to give you comments, and work backwards to figure out when your draft needs to be ready. Obtain copies of as many successfully funded applications of this type as you can, ideally with their summary sheets or reviewer comments. You’ll usually have to promise confidentiality to get them. You can search for funded federal grants on the NIH RePORTER website. It’s also worthwhile just asking around. Read 4 Steps to Funding in its entirety before drafting anything. It should only take a few hours. We have a copy in the lab somewhere. Study the call/grant description carefully and study the funded applications. What consistencies appear? Potentially consult with program officers and other applicants to make sure you understand what reviewers are looking for. Write the proposal, and get funded! No seriously, we’ll discuss proposal-specific details in person. But as a mentor once told me, people generally like things in proportion to how well they understand them, so you want to make sure the proposal is really exciting—see 4 Steps to Funding—and really, really clear. This is why we ask people outside our subfield to give us comments. 4.9 Do peer review I’m assuming you’ve already been invited to review a paper. If you’ve not, there’s not too much you can do, aside from publishing. (I’m always on the lookout for papers I can invite lab members to review with me or in my place.) If you make positive comments about unpublished work at a meeting, there’s a chance the authors will suggest you as a reviewer. If you’ve been asked to review a paper, Ensure you do not have a conflict of interest. Check the journal’s policy, but regardless, look in your heart of hearts, and do not overestimate your impartiality. You should decline to review papers by friends and recent collaborators. I also decline to read manuscripts that seem to be directly “competing” with my own, i.e., they are tackling the same question using similar methods. They’re probably not really competing, but if I feel they are, that’s enough to disqualify me. Confirm you can make the deadline. If you need more time, it’s better to ask the editor for extra time now. It might be a good idea to ask if they want your review as a backup. It seems rude to ask and probably usually is, but I’ve twice agreed to review manuscripts for journals only to be told after I’d agreed but before the deadline that they had received a sufficient number of reviews and no longer needed mine. This doesn’t seem polite except under extraordinary circumstances and wasted hours of my time. I’ll name the journals and editors in person. Read over the journal’s criteria for judging manuscripts. For some journals, novelty is unimportant, or there’s no requirement to work with empirical data. It’s really annoying to be held to standards that the journal itself does not endorse; the editors sometimes don’t know. (Nope, no baggage here!) It’s good to start your reviews with a succinct summary of the manuscript, especially by placing it in the context of other work in the field. This helps the editor, who might not understand the paper so well, and also shows that you understand the paper. Directly discuss what the paper contributes or could contribute and the extent to which the paper satisfies the criteria important to the journal. Next review the major strengths and weaknesses of the paper. Be very clear about what makes or doesn’t make the paper convincing. Especially regarding claims of novelty, it is critical to cite! One of the most maddening things is to get a review saying, “Meh, this has basically been done before,” with no references. Citations also help the authors improve their work quickly, especially if you’re suggesting relevant papers they’ve missed. In general, do not punish the authors for not doing the study you would’ve done or think should be done. Focus on what the paper does contribute or could contribute with minor or moderate changes. Do not recommend acceptance, major revisions, minor revisions, etc., directly in the body of the review. That recommendation is for the editor to make. Your job is to help the editor make a decision and the authors to understand your impression of their paper—both what’s good about it and what can be improved. Be constructive. Never be snarky or sarcastic. Imagine this is the first review the first author is receiving. Let the editor know in your review or confidential comments if you do not feel qualified to judge certain parts of the manuscript. Especially for papers that need a lot of work, it’s not a good use of time to note every small mistake or error. You do not need to be the copy editor. For papers involving code, try to run the code and check its documentation, but do not reimplement the analysis unless you want to. You also do not need to check complex mathematical derivations. However, the methods should appear clear and reproducible. It’s fine, even good, to comment on other reviewers’ comments in later rounds of review, especially if you disagree with them. 4.10 Have productive meetings Before the meeting: If proposing an ad hoc meeting, give an estimate of how much time it should take in your invitation. This will help people focus during the meeting. If the meeting is routine, let the other participants know in advance if you expect it to be especially short or long. Make sure every meeting has a purpose that everyone understands. It is good if you can send an agenda beforehand. Some people also like to review materials, such as summaries, beforehand. Ask they want this. At the meeting: Present the agenda and remind people of the meeting’s purpose. If discussing research, ensure you give appropriate background information and context, and ensure your figures and numbers are clear (even if they’re not “pretty”). Take notes rather than forcing yourself to recall things later. End by summarizing the next steps, who does them, and the timeline. Keep the meeting on track: If a less relevant discussion takes off, flag this as a topic to address later. After the meeting: For committee meetings, meetings with collaborators, etc., it is extremely helpful to send a short follow-up email summarizing what was decided and what will happen next. Follow up on those commitments. 4.11 Book travel The general idea is to reduce costs as much as possible while remaining comfortable and productive. (These savings will go toward more travel, research, and fun lab things.) The grants that fund travel have different allowable expenses and documentation requirements, so please check flights and your total budget with me before booking. Tips: Imagine the money as your own. Please plan your travel far enough in advance that we are not paying through the nose for registration or flights. Please book flights at least six weeks in advance, unless you’re really confident the price is dropping. For conferences, book flights earlier. UChicago has discounts with various airlines, hotels, etc. Check them. You may need to use the University’s travel agency or use a special website (e.g., swabiz.com for Southwest). (Some of these “deals” should probably be checked against Hotwire or Priceline.) Bonnie can book the flight for you so you do not have to pay and then be reimbursed. If you pay upfront yourself, you will have to wait until after the travel is complete to be reimbursed. If you book an atypical flight, such as something arriving a few days early or leaving a few days late, or that includes personal travel, funding groups generally require that you also include a quote, obtained at the time of booking, of the cost of the flight for typical (business-only) travel. They’ll only reimburse up to this amount. But it’s otherwise totally fine to include personal travel with business, as long as you document carefully. If your travel is funded by the federal government, you generally have to fly with a U.S. carrier or book your ticket through that carrier. You are not required to share hotel rooms or use Airbnb, but if you do, it’s appreciated! It’s also great if you can share rides/taxis and take public transit, but you’re not expected to go to great inconvenience to save money. Your food costs should be reimbursable up to federal rates, but I think the principled thing to do is only submit receipts for food costs above what you’d normally spend (and not to go crazy with spending). Note the receipts must be itemized, and alcohol cannot appear on the receipts of NIH-funded travel. Submit receipts to Bonnie within one month of travel. Sign up for airline loyalty programs if you haven’t yet. "],
["midway.html", "Chapter 5 Midway 5.1 Storage on Midway 5.2 Connecting to Midway 5.3 Configuring Software on Midway 5.4 Running Jobs on Midway 5.5 SLURM tricks", " Chapter 5 Midway Midway is the main computing cluster used by the lab, run by the Research Computing Center. The official documentation is maintained here by RCC: https://rcc.uchicago.edu/docs/ This page contains some tasks that are likely to be useful to you. 5.1 Storage on Midway There are three places you can store things on Midway: (1) your home directory; (2) your scratch space; and (3) a shared project directory for the lab. Your home directory is in /home/&lt;CNetID&gt; and has a quota of 25 GB. This is a good place to check out your code, install software you want to use for runs, etc. You should NOT, in general, store simulation output in your home directory. Your scratch space is $HOME/scratch-midway and has a quota of 100 GB. This is where you should dump simulation output. I recommend organizing your simulation output using a predictable system: I like to put each experiment in a directory tagged by the date and a name, e.g., 2014-12-08-antigen-vaccine; you may want prefer a hierarchy. The lab project directory is /project/cobey and has a quota of 500 GB for everyone. If you want to share simulation output with other people in the lab, put them here. Keep things organized into separate project directories; I would recommend tagging directories with dates as above, e.g. /project/cobey/bcellproject-storage/2014-12-08-test. To check your disk usage, use the quota command. These quotas are current as of 8 December 2014. 5.2 Connecting to Midway Details here: https://rcc.uchicago.edu/docs/connecting/ 5.2.1 SSH (terminal) To connect via ssh, use your CNetID: $ ssh &lt;CNetID&gt;@midway.rcc.uchicago.edu You can either type your password every time you want to log in, or, way cooler, set up a passwordless login using public-key authentication. 5.2.2 SCP You can copy individual files or directly back and forth using the scp command, e.g., $ scp &lt;local-path&gt; &lt;CNetID&gt;@midway.rcc.uchicago.edu:&lt;remote-path&gt; $ scp &lt;CNetID&gt;@midway.rcc.uchicago.edu:&lt;remote-path&gt; &lt;local-path&gt; There are also graphical SSH/SCP browsers for Mac OS X, Linux, and Windows: WinSCP (Windows) FileZilla (all platforms) Fugu (Mac OS X; be sure to download 1.2.1pre1; see the News section) 5.2.3 SMB (connect as a disk) You can make Midway to look like a local disk on your computer using SMB. This is convenient for things like editing job submission scripts using your favorite editor directly on the server, without having to copy things back and forth. Midway’s SMB hostname is midwaysmb.rcc.uchicago.edu. If you’re off campus, you’ll need to be connected to the U of C VPN to access SMB. It will also be pretty slow, especially if you’re on a crappy cafe connection like the one I’m on now–you may find a GUI SCP client to be a better choice offsite. On Mac OS X, go to the Finder, choose Go &gt; Connect to Server… (Command-K), and then type in the URL for the directory you want to access. The URLs are currently confusing (you need to specify your CNetID in the scratch URL but not in the home URL): Home: smb://midwaysmb.rcc.uchicago.edu/homes Scratch: smb://midwaysmb.rcc.uchicago.edu/midway-scratch/&lt;CNetID&gt; Project: smb://midwaysmb.rcc.uchicago.edu/project/cobey 5.2.4 ssh -X (terminal with graphical forwarding) If you connect to Midway via ssh -X, graphical windows will get forwarded to your local machine. On Linux, this should work out of the box; on Mac OS X you’ll need to install XQuartz first. (There’s probably a way to make this work on Windows too; if you figure this out, please add instructions here.) It’s then as simple as doing this when logging in: $ ssh -X &lt;CNetID&gt;@midway.rcc.uchicago.edu This is especially useful for the sview command (see below); it also will forward the graphics of a job running on a cluster node if you use ssh -X and thensinteractive`. 5.2.5 VNC (graphical interface via ThinLinc) You can also get a full Linux desktop GUI on a Midway connection using a program called ThinLinc: https://rcc.uchicago.edu/docs/connecting/#connecting-with-thinlinc WARNING: the first time you use ThinLinc, before you click Connect go to Options… &gt; Screen and turn off full-screen mode. Otherwise ThinLinc will take over all your screens, making it rather hard to use your computer. 5.3 Configuring Software on Midway Before you run anything on Midway, you’ll need to load the necessary software modules using the module command: https://rcc.uchicago.edu/docs/tutorials/intro-to-software-modules/ If you’re not sure what the name of your module is, use, e.g., $ module avail intel and you’ll be presented with a list of options. You can then load/unload modules using, e.g., $ module load intel/15.0 $ module unload intel/15.0 There are multiple versions of many modules, so you’ll generally want to check module avail before trying module load. If you want to automatically load modules every time you log in, you can add module load commands to the end of your ~/.bash_profile file (before # User specific environment and startup programs). 5.3.1 Git The easiest way to get your code onto Midway is to check it out $ module avail git 5.3.2 Java $ module avail java As of writing, Midway only has one version of Java (1.7), so be sure not to use JDK 1.8 features in your Java code. 5.3.3 C/C++ $ module avail intel $ module avail gcc There are three C/C++ compiler modules available on Midway: gcc, intel, and pgi. The Intel and PGI compilers are high-performance compilers that should produce faster machine code than GCC, but only intel seems to be kept up to date on Midway, so I’d recommend using that one. The Intel compilers should work essentially the same as GCC, except due to ambiguities in the C++ language specification you may sometimes find that code that worked on GCC needs adjustment for Intel. To use the Intel compiler, just load the module and compile C code using icc and C++ code using icpc. Unless you have a good reason not to, you should use module avail to make sure you’re using the latest GCC and Intel compilers, especially since adoption of the C++11 language standard by compilers has been relatively recent at the time of writing. Also, it’s worth knowing that Mac OS X, by default, uses a different compiler entirely: LLVM/Clang. (Currently, only an old version of LLVM/Clang is available on Midway). So you might find yourself making sure your code can compile using three different implementations of C++, each with their own quirks. Here’s how you compile C++11 code using the three compilers: $ g++ -std=c++11 -O3 my_program.cpp -o my_program $ icpc -std=c++11 -O3 my_program.cpp -o my_program $ clang++ -std=c++11 -stdlib=libc++ -O3 my_program.cpp -o my_program NOTE: the -O3 flag means “optimization level 3”, which means, “make really fast code.” If you’re using a debugger, you’ll want to leave this flag off so the debugger can figure out where it is in your code. If you’re trying to generate results quickly, you’ll want to include this flag. (If you’re using Apple Xcode, having the flag off and on roughly correspond to “Debug” and “Release” configurations that you can choose in “Edit Scheme”.) If you want to make it easy to compile your code with different compilers on different systems, you can use the make.py script in the bcellmodel project as a starting point. It tries Intel, then Clang, then GCC until one is available. (This kind of thing is possible, but a bit annoying to get working, using traditional Makefiles, so I’ve switched to using simple Python build scripts for simple code.) 5.3.4 R $ module avail R shows several versions of R. The best version will probably be the latest one alongside the Intel compiler, e.g., R/3.1+intel-15.0 at the time of writing. 5.3.5 Python In order to keep a consistent Python environment between your personal machine and Midway, we are maintaining our own Python installations in /project/cobey. Skip the Midway Python modules entirely, and instead include this in your ~/.bash_profile: export PATH=/project/cobey/anaconda/bin:/project/cobey/pypy/bin:$PATH To make sure things are set up properly make sure that which python finds /project/cobey/anaconda/bin/python and which pypy finds /project/cobey/pypy/bin/pypy. See the Python page on this wiki for more information. 5.3.6 Matlab and Mathematica You shouldn’t use Matlab or Mathematica if possible, because if you publish your code your results will only be reproducible to people that want to pay for Matlab or Mathematica. But if you must… module avail matlab module avail mathematica shows that they are available on Midway. (Getting a graphical Mathematica notebook to run on the cluster is a pain in the ass, though, so you’re probably better off just running it locally if you can get away with it.) 5.4 Running Jobs on Midway I’ll leave most of the details to the official documentation: https://rcc.uchicago.edu/docs/using-midway/#using-midway but a summary of important stuff follows. 5.4.1 Overview Midway consists of a large number of multi-core nodes, and uses a system called SLURM to allocate jobs to cores on nodes. Some details on the terminology: a “node” is what you normally think of as an individual computer: a box with a motherboard, a hard drive, etc., running a copy of Linux. Each node’s motherboard contains several processors (a physical chip that plugs into the motherboard), each of which may contain several cores. A “core” is a collection of circuits inside the processor that can, conceptually speaking, perform one series of instructions at a time. (Until a few years ago, processors only consisted of one core and people talked about “processors” the way they now talk about “cores,” so you might hear people confusing these from time to time.) If you are writing code that does only one thing at a time (serial code), then all you really need to know is that a single run of your code requires a single core. 5.4.2 Job structure Note that Midway counts service units, or core-hours in increments of 0.01. To minimize waste, we’re best off designing jobs to be at least several minutes each. (It makes sense that we wouldn’t want to bog down the scheduler anyway.) 5.4.3 Priority As described below, if your jobs aren’t running right away, you can use $ squeue -u &lt;CNetID&gt; to see what’s going on. If your jobs are queued with (Priority) status, it means other jobs are taking priority. Job priorities are determined by the size of the job, its time in the queue, the requested wall time (so it pays to be precise and know your jobs well), and group-level prior usage. Groups that have consumed fewer resources get higher priority than those using more. This usage has a half-life of approximately 14 days, which means it’s less awkward to spread jobs out over time. You can view the priority of queued jobs using $ sprio 5.4.4 Useful commands 5.4.4.1 sinteractive To get a dedicated job that you can interact with just like any login session–e.g., if you want to manually type commands at the command line to try some code out, make changes, do some analysis, etc.–you can use the sinteractive command: https://rcc.uchicago.edu/docs/using-midway/#sinteractive If you connected via ssh -X, then graphical windows will also get forwarded from the cluster to your local machine. 5.4.4.2 sbatch To submit a single non-interactive job to the cluster, use the sbatch command: https://rcc.uchicago.edu/docs/using-midway/#sbatch This involves preparing a script with special indications to SLURM regarding how much memory you need, how many cores, how long you want the job to run, etc. 5.4.4.3 squeue View jobs you are currently running: $ squeue -u &lt;CNetID&gt; 5.4.4.4 scancel Cancel jobs by job ID: $ scancel &lt;job-ID&gt; Cancel all of your jobs: $ scancel -u &lt;CNetID&gt; 5.4.4.5 accounts Display number of used/available CPU-hours for the lab: $ accounts balance Display number of CPU hours used by you: $ accounts usage 5.4.4.6 sview If you’re connected graphically to Midway (either via ssh -X or using ThinLinc), you can get a graphical view of the SLURM cluster, which makes it easy to do things like selectively cancel a bunch of jobs at once: $ sview The most useful command: Actions &gt; Search &gt; Specific User’s Job(s) 5.4.4.7 quota Display storage usage: $ quota The standard quota on an individual account is 25GB. When you exceed this, Midway will notify you the next time you log in. There is a grace period of 7 days to adjust your usage. There is also a hard limit of 30GB. 5.4.5 Parameter sweeps TODO 5.5 SLURM tricks squeue -o lets you specify additional information for squeue using a format string. These are annoying to type every time you want to query things. You can create an alias in your .bash_profile script: alias sq=&#39;squeue -o &quot;%.18i %a %.9P %.8j %.8u %.8T %.10M %.9l %R %B %C %D %m&quot;&#39; which includes standard info plus some extra stuff (including time limit, # nodes, # CPUs, and memory). Then you can just type sq, sq -p cobey, sq -u edbaskerville, etc. to perform queries with your customized format string. See man squeue for a list of format string options. sinfo -o has similar options, including the ability to see how many processors are available/in use: alias si=&#39;sinfo -o &quot;%P %.5a %.10l %.6D %.6t %C&quot;&#39; A full list of aliases for user edbaskerville might look like: alias sq=&#39;squeue -o &quot;%.18i %a %.9P %.8j %.8u %.8T %.10M %.9l %R %B %C %D %m&quot;&#39; alias qcobey=&#39;sq -p cobey&#39; alias qsandyb=&#39;sq -p sandyb -u edbaskerville&#39; alias si=&#39;sinfo -o &quot;%P %.5a %.10l %.6D %.6t %C&quot;&#39; alias icobey=&#39;si -p cobey&#39; alias isandyb=&#39;si -p sandyb&#39; "],
["onboarding.html", "Chapter 6 Onboarding", " Chapter 6 Onboarding Welcome to the lab! This is an incomplete checklist of items to cover in your first week. We’ll review all of this in a meeting the first day. The most important things are to read the whole handbook and not to hesitate to ask questions. Workspace Identify hardware to purchase: monitor, laptop, external hard drive, keyboard, mouse, etc. Any other accommodations needed for comfortable work station? Key to lab (from E&amp;E office, $20 deposit required) Get UChicago ID card from library. This gives you access to the building. Consider asking for access now to other spaces you may visit, e.g., immunology (4th floor of KCBD). Computing and admin Request an account to use the Cobey partition on Midway. Request access to the lab’s Asana workspace. Request access to cobeylab github account. (Create a github account if you’ve not yet.) Request access to the theory group calendar and the lab calendar Consider signing up for emails on additional seminar series and groups. (Note that a list of almost all BSD seminars will be emailed to you every day.) Ask Garnett to help you set up CrashPlan Pro and the external hard drive for backups. Figure out a lab service task. Write your profile for the lab website. Research Identify a time for weekly meetings. Develop your one-year goals and describe your long-term plans. Meet with Sarah to identify short-term research goals and funding and conference deadlines. Learn who/what is funding your research. Introductions Lab members! E&amp;E administrators and IT: Mary, Bonnie, Connie, Jeff, Linda, Garnett, Mike Building administrators and custodians Neighbors in the Erman Building Other faculty "],
["references.html", "References", " References "]
]
